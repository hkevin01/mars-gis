name: Mars GIS Platform CI/CD - TDD Comprehensive Testing

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run tests nightly at 2 AM UTC
    - cron: "0 2 * * *"

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"

jobs:
  # Frontend TDD Tests
  frontend-tdd-tests:
    name: Frontend TDD Test Suite
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: ["16", "18", "20"]
        test-type:
          ["unit", "integration", "component", "accessibility", "performance"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run ESLint
        working-directory: ./frontend
        run: npm run lint

      - name: Run TypeScript type checking
        working-directory: ./frontend
        run: npm run type-check

      - name: Run ${{ matrix.test-type }} tests with TDD validation
        working-directory: ./frontend
        run: |
          case "${{ matrix.test-type }}" in
            "unit")
              npm run test:unit:coverage -- --testNamePattern="RED|GREEN|REFACTOR"
              ;;
            "integration")
              npm run test:integration:coverage
              ;;
            "component")
              npm run test:components:coverage
              ;;
            "accessibility")
              npm run test:a11y
              ;;
            "performance")
              npm run test:performance
              ;;
          esac

      - name: Upload frontend coverage
        if: matrix.node-version == '18'
        uses: codecov/codecov-action@v3
        with:
          files: ./frontend/coverage/lcov.info
          flags: frontend-${{ matrix.test-type }}
          name: frontend-${{ matrix.test-type }}-coverage

  # Backend TDD Tests
  backend-tdd-tests:
    name: Backend TDD Test Suite
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
        test-type: ["unit", "integration", "api", "ml", "geospatial", "data"]

    services:
      postgres:
        image: postgis/postgis:15-3.3
        env:
          POSTGRES_USER: mars_test
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: mars_gis_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            gdal-bin \
            libgdal-dev \
            libproj-dev \
            libgeos-dev \
            libspatialite-dev \
            libsqlite3-mod-spatialite \
            postgresql-client

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-github-actions-annotate-failures

      - name: Set up environment variables
        run: |
          echo "DATABASE_URL=postgresql://mars_test:test_password@localhost:5432/mars_gis_test" >> $GITHUB_ENV
          echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV
          echo "TESTING=true" >> $GITHUB_ENV
          echo "LOG_LEVEL=DEBUG" >> $GITHUB_ENV

      - name: Run ${{ matrix.test-type }} tests
        run: |
          python run_tests.py --${{ matrix.test-type }} --coverage --verbose

      - name: Upload coverage reports to Codecov
        if: matrix.python-version == '3.11' && matrix.test-type == 'unit'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.python-version }}-${{ matrix.test-type }}
          path: |
            htmlcov/
            tests.log
            pytest-report.xml

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety

      - name: Run Bandit security scan
        run: |
          bandit -r src/ -f json -o bandit-report.json || true
          bandit -r src/ -f txt

      - name: Run Safety vulnerability check
        run: |
          safety check --json --output safety-report.json || true
          safety check

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install quality tools
        run: |
          python -m pip install --upgrade pip
          pip install black isort flake8 mypy

      - name: Check code formatting with Black
        run: |
          black --check --diff src/ tests/

      - name: Check import sorting with isort
        run: |
          isort --check-only --diff src/ tests/

      - name: Check code style with flake8
        run: |
          flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503

      - name: Check type hints with mypy
        run: |
          mypy src/ --ignore-missing-imports --disable-error-code=import

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [frontend-tdd-tests, backend-tdd-tests, security, code-quality]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -t mars-gis:latest .

      - name: Test Docker image
        run: |
          docker run --rm mars-gis:latest python -c "import mars_gis; print('Mars GIS imported successfully')"

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[perf]')

    services:
      postgres:
        image: postgis/postgis:15-3.3
        env:
          POSTGRES_USER: mars_test
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: mars_gis_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-benchmark locust

      - name: Run performance benchmarks
        run: |
          python run_tests.py --performance --verbose

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: |
            benchmark-results.json
            performance-report.html

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs:
      [frontend-tdd-tests, backend-tdd-tests, security, code-quality, docker]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'

    environment:
      name: staging
      url: https://mars-gis-staging.example.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "🚀 Deploying to staging environment..."
          # Add actual deployment commands here

      - name: Run smoke tests
        run: |
          echo "🧪 Running smoke tests on staging..."
          # Add smoke test commands here

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs:
      [frontend-tdd-tests, backend-tdd-tests, security, code-quality, docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    environment:
      name: production
      url: https://mars-gis.example.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "🚀 Deploying to production environment..."
          # Add actual deployment commands here

      - name: Run health checks
        run: |
          echo "🏥 Running production health checks..."
          # Add health check commands here

  notify:
    name: Notifications
    runs-on: ubuntu-latest
    needs: [frontend-tdd-tests, backend-tdd-tests, security, code-quality]
    if: always()

    steps:
      - name: Notify on success
        if: needs.frontend-tdd-tests.result == 'success' && needs.backend-tdd-tests.result == 'success' && needs.security.result == 'success' && needs.code-quality.result == 'success'
        run: |
          echo "✅ All checks passed! Mars GIS Platform is ready for deployment."

      - name: Notify on failure
        if: needs.frontend-tdd-tests.result == 'failure' || needs.backend-tdd-tests.result == 'failure' || needs.security.result == 'failure' || needs.code-quality.result == 'failure'
        run: |
          echo "❌ Some checks failed. Please review the results before proceeding."
